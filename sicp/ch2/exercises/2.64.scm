(define (partial-tree elems n)
  (if (= n 0)
      (cons '() elems)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elems left-size)))
          (let ((left-tree (car left-result))
                (non-left-elems (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elems))
                  (right-result (partial-tree (cdr non-left-elems)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elems (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elems))))))))

(define (list->tree elems)
  (car (partial-tree elems (length elems))))

(define tree (list->tree '(1 3 5 7 9 11)))

(tree->list-1 tree)
(tree->list-2 tree)
