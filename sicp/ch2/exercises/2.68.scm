(define (member? x ls) (member x ls))
(define (encode-symbol s tree)
  (cond ((null? tree) '())
        ((leaf? tree) '())
        ((member? s (syms (left-branch tree)))
         (cons '0 (encode-symbol s (left-branch tree))))
        ((member? s (syms (right-branch tree)))
         (cons '1 (encode-symbol s (right-branch tree))))
        (else (error "bad symbol -- encode-sympol" s))))

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define code '(A D A B B C A))
(encode code sample-tree)
